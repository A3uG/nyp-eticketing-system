<!-- TODO: Make sure the starting map isn't static, and is actually created from the input default values -->

<%- include('../templates/head')-%>
<body>
    <%- include('../templates/navbar')-%>
    <div class="container"> <!-- Always enclose everything in a container  -->
        <main role="main" class="inner cover"> <!-- Idk what this element does but every tutorial uses it so eh might as well use it  -->

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Venue details form section  -->
            <!-- Heading  -->
            <h2 class="section-heading">Venue Details</h2>
            <div class="mt-3"></div>

            <form id="saveVenueForm" action="/api/add-venue" method="post">
                <div class="row"> <!-- BTW, rows are used to create responsive columns but I'm guessing yall already know that. But if you don't, better learn the bootstrap grid system cause we're gonna use it a lot.  -->
                    <!-- Venue Name Input Card  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="nameInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Venue Name</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="nameInput" name="nameInput" class="form-control card-input" type="text" placeholder="e.g. Block A"> <!-- Note that the name attribute is required to get textbox values from the backend. It should have the same value as the id.  --> 
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-6"></div> <!-- Used for spacing between sections  -->
                <!-- Seat chart card section  -->
                <!-- Heading  -->
                <h2 class="section-heading">Seat Chart</h2>
                <div class="mt-3"></div> <!-- Used for spacing between section heading and content  -->
                <!-- Content  -->
                <div class="row">
                    <div class="col-sm-4">
                        <!-- Column Input Card  -->
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="columnInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Columns</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="columnInput" name="columnInput" class="form-control card-input" type="number" value="6" min="1" max="40" placeholder="e.g. 10">
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <!-- Row Input Card  -->
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="rowInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Rows</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="rowInput" name="rowInput" class="form-control card-input" type="number" value="4" min="1" max="40" placeholder="e.g. 7">
                            </div>
                        </div>
                    </div>
                </div>

                <div id="seatChartCard" class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                    <div class="card-body">
                        <div id="tableWrapper" class="seatCharts-wrapper"> <!-- Seat maps should be ensclosed in a seat chart wrapper -->
                            <div id="seatMap" class="seatCharts-container"> <!-- This is the element the seat chart is gonna latch itself onto -->
                                <div class="front-indicator">Front</div> <!-- The seat chart element should also contain the front indicator so the user knows the orientation of the map -->
                            </div>
                        </div>
                    </div>
                </div>
                <div id="legend" class="seatCharts-legend row">
                    <!-- Add Seat Type Card -->
                    <div id="addSeatCol" class="seatCharts-cardColumn col-auto">
                        <div id="addSeatTypeCard" class="seatCharts-legendCard card card-hover text-primary font-weight-medium py-2 px-4 mt-3" seat-character="G">
                            <div class="seatCharts-cardBody card-body">
                                <div id="addSeatContent" class="seatCharts-legendItem">
                                    <span class="seatCharts-legendDescription">
                                        <i class="fas fa-plus"></i>&nbsp;&nbsp;Add Seat
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="removeSeatCol" class="seatCharts-cardColumn col-auto">
                        <div id="removeSeatTypeCard" class="seatCharts-legendCard card card-hover text-primary font-weight-medium py-2 px-4 mt-3" seat-character="E">
                            <div class="seatCharts-cardBody card-body">
                                <div id="removeSeatContent" class="seatCharts-legendItem">
                                    <span class="seatCharts-legendDescription">
                                        <i class="fas fa-minus text-danger"></i>&nbsp;&nbsp;Remove Seat
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="mt-6"></div> <!-- Used for spacing between sections  -->
                <button id="saveVenueTypeButton" class="btn btn-primary btn-lg w-100" type="submit">Save Venue</button>
            </form>
        </main>
    </div>
</body>

<script>
    const defaultSeat = "G";
    const tempEmptySpace = "E";
    const emptySpace = "_";
    let selectedSeatType; // This variable will contain the character of the seat type we've selected

    // Seat chart configuration
    let sc = {};

    sc.map = [
        'GGGGGG',
        'GGGGGG',
        'GGGGGG',
        'GGGGGG',
    ];

    sc.seats = {
        [defaultSeat]: {
            category: 'General',
            blocked: false,
            classes: 'general',
        },
        [tempEmptySpace]: {
            category: 'Empty Space',
            blocked: false,
            classes: 'temp-space',
        },
    };

    sc.naming = {
        rows: ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','AA','BB','CC','DD','EE', 'FF','GG','HH','JJ','KK','LL','MM','NN','OO'],
        getLabel: function (character, row, column) {
            return row + ':' + column;
        },
        getId: function (character, row, column) {
            return row + ':' + column;
        }
    };

    sc.legend = {
        node: $('#legend'),
        items: []					
    };

    sc.click = function () {
        replaceMapSeat(sc.map, this, selectedSeatType, sc.seats[selectedSeatType]) 
    };

    // Rest of the functions
    $(document).ready(function() {
        bindMap();
        scaleContentWidth($('#tableWrapper'), $('#seatMap'));
    });

    $(window).resize(function() { // Upon resizing the browser window, the scaling function is called to make sure the seat chart fits within the new dimensions of the parent container
        scaleContentWidth($('#tableWrapper'), $('#seatMap'));
    });

    $("#columnInput,#rowInput").change(function () {
        const columnInput = $("#columnInput").val();
        const rowInput = $("#rowInput").val();
        
        if (!$.isNumeric(columnInput) || !$.isNumeric(rowInput)) {
            showDangerToast("Please enter a valid value!");
            return;
        }
        
        const columns = columnInput.toNum();
        const rows = rowInput.toNum();

        if (columns < 1 || rows < 1) {
            showDangerToast("Please enter a larger value!");
            return;
        }

        if (columns > 40 || rows > 40) {
            showDangerToast("Please enter a smaller value!");
            return;
        }

        if (this.id == "rowInput") {
            const orgHeight = $('#seatMap')[0].getBoundingClientRect().height; // Get the original height of the seat map before changing the number of rows

            resizeRow(columns, rows, sc.map); // Changes number of columns
            reloadMap(); // Reloads the map with the updated map
            resizeParentHeight(orgHeight, $('#tableWrapper'), $('#seatMap')); // Reduce the maps's 
        }

        if (this.id == "columnInput") {
            resizeColumn(columns, rows, sc.map); // Changes number of rows
            reloadMap(); // Reloads the map with the updated map
            scaleContentWidth($('#tableWrapper'), $('#seatMap')); // Scale the map so the columns are all visible
        }
    });

    $(document).on("click", ".seatCharts-legendCard", function() {
        const highlighted = toggleHighlight($(this), ".seatCharts-legendCard");
        
        if (highlighted) {
            selectedSeatType = $(this).attr("seat-character");
        } else {
            selectedSeatType = null;
        }
    });

    $('#saveVenueForm').submit(function (event) {
        event.preventDefault();
        $('#saveVenueTypeButton').prop('disabled', true);

        const nameInput = $("#nameInput").val();
        if (!nameInput) {
            showDangerToast("Please enter a venue name!");
            $('#saveVenueTypeButton').prop('disabled', false);
            return;
        }
        
        const venueName = toTitleCase(nameInput);
        sc.map = replaceMapSeatCharacters(sc.map, tempEmptySpace, emptySpace);
        $('#saveVenueTypeButton').prop('disabled', false);
    });

    resizeRow = (columns, rows, map) => {
        const defaultSeat = 'G'; // The default is the seat character that's supposed to be added to each new seat that's created
        const defaultRow = defaultSeat.repeat(columns); // The default row is just the one that gets assigned to any new row that's created. We take the number of columns the user input and multiply it by the default seat type (general, G) to get it
        resizeArray(map, rows, defaultRow); // And then we use the resize function to remove or add rows with the default row depending on the user's input
    };

    resizeColumn = (columns, rows, map) => {
        const defaultSeat = 'G'; // The default is the seat character that's supposed to be added to each new seat that's created
        for (i = 0; i < rows; i++) { // To change the number of columns we have to loop through each row indvidually and resize them
            const splitRow = [...map[i]]; // Since rows are stored as strings in the map, we have to split them into an array
            resizeArray(splitRow, columns, defaultSeat); // And then we use the resize function to remove or add columns with the default seat depending on the user's input 
            map[i] = splitRow.join(""); // Then we just have to join the array into a string and then put them back into the map
        }
    };

    reloadMap = () => {
        unbindCurrentMap();
        bindMap();
    };

    unbindCurrentMap = (mapNode) => {
        $('.seatCharts-row').remove();
        $('#seatMap, #seatMap *').unbind().removeData();
        $('#seatMap').attr('aria-activedescendant', null);
    };

    bindMap = () => {
        $('#seatMap').seatCharts(sc);
    };
</script>

<%- include('../templates/footer')-%>