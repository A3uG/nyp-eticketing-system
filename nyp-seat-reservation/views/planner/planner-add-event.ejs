<!-- TODO: Complete documentation for this part -->
<!-- TODO: Change seat map on select change -->
<!-- TODO: Add helper from drop down list -->
<!-- TODO: Add all form details to event object and send that using ajax -->
<!-- TODO: Add venue -->
<!-- TODO: Delete seat types -->
<!-- TODO: Click on row to replace entire row with seat type -->

<%- include('../templates/head')-%>
<body>
    <%- include('../templates/navbar')-%>
    <div class="container"> <!-- Always enclose everything in a container  -->
        <main role="main" class="inner cover"> <!-- Idk what this element does but every tutorial uses it so eh might as well use it  -->

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Event details form section  -->
            <!-- Heading  -->
            <h2 class="section-heading">Event Details</h2>
            <div class="mt-3"></div>
            <!-- Content  -->
            <form action="/" method="post">
                <div class="row"> <!-- BTW, rows are used to create responsive columns but I'm guessing yall already know that. But if you don't, better learn the bootstrap grid system cause we're gonna use it a lot.  -->
                    <!-- Event Name Input Card  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="eventNameTextInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Event Name</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="eventNameTextInput" name="eventNameTextInput" class="form-control card-input" type="text" placeholder="e.g. Dance Competition"> <!-- Note that the name attribute is required to get textbox values from the backend. It should have the same value as the id.  --> 
                            </div>
                        </div>
                    </div>
                    <!-- Event Start Date / Time Input Card  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="eventDateTimeInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Event Date / Time</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="eventDateTimeInput" name="eventDateTimeInput" class="form-control card-input" type="datetime-local" placeholder="e.g 13th March 2021, 9am"> <!-- This is where the user actually inputs all their stuff  -->
                            </div>
                        </div>
                    </div>
                    <!-- Max. No. of Seats Input Card  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="maxSeatsPerReservationSelectInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Maximum no. of seats per reservation</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <select id="maxSeatsPerReservationSelectInput" name="maxSeatsPerReservationSelectInput" class="form-control card-input"> <!-- This is where the user actually inputs all their stuff  -->
                                    <option>No Limit</option>
                                    <option>2</option>
                                    <option>3</option>
                                    <option>4</option>
                                    <option>5</option>
                                    <option>6</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <!-- Checkmark (check) Input Card w/o Label  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3">
                            <div class="card-body no-label-card-body">
                                <div id="prioritiseBackCheckForm">
                                    <div class="form-check form-check-inline ml-2">
                                        <input id="prioritiseBackCheck" name="prioritiseBackCheck"  class="form-check-input lg-check" type="checkbox" value="true">
                                        <label class="form-check-label px-3" for="prioritiseBackCheck">
                                            Prioritise seats at the back
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-6"></div> <!-- Used for spacing between sections  -->
                <!-- Seat chart card section  -->
                <!-- Heading  -->
                <h2 class="section-heading">Seat Chart</h2>
                <div class="mt-3"></div> <!-- Used for spacing between section heading and content  -->
                <!-- Content  -->
                <div class="row">
                    <!-- Venues Select Input Card  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="venueSelectInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Venue</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <select id="venueSelectInput" name="venueSelectInput" class="form-control card-input"> <!-- This is where the user actually inputs all their stuff  -->
                                </select>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="seatChartCard" class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                    <div class="card-body">
                        <div id="tableWrapper" class="seatCharts-wrapper"> <!-- Seat maps should be ensclosed in a seat chart wrapper -->
                            <div id="seatMap" class="seatCharts-container"> <!-- This is the element the seat chart is gonna latch itself onto -->
                                <div class="front-indicator">Front</div> <!-- The seat chart element should also contain the front indicator so the user knows the orientation of the map -->
                            </div>
                        </div>
                    </div>
                </div>
                <div id="legend" class="seatCharts-legend row">
                    <!-- Add Seat Type Card -->
                    <!-- This card will always be fixed in front of all the other legend cards -->
                    <div id="addSeatTypeCol" class="seatCharts-cardColumn col-auto">
                        <div id="addSeatTypeCard" class="seatCharts-legendCard card card-hover text-primary font-weight-medium py-2 px-4 mt-3">
                            <div class="seatCharts-cardBody card-body">
                                <div id="addSeatContent" class="seatCharts-legendItem">
                                    <span class="seatCharts-legendDescription">
                                        <i class="fas fa-plus"></i>&nbsp;&nbsp;Add Seat Type
                                    </span>
                                </div>
                            </div>
                            <a href="#addSeatTypeModal" class="stretched-link" data-toggle="modal" data-target="#addSeatTypeModal"></a> <!-- On pressing this card, the add seat type button will show up -->
                        </div>
                    </div>
                </div>
                <div class="mt-2"></div>
                <span class="text-muted font-weight-light">To edit the seat chart, click on any of the seat types below and select a seat in the map to replace it with your selection.</span>
            </form>

        </main>
    </div>

    <div id="addSeatTypeModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="addSeatTypeModal" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <!-- This is where you enter the title of the modal -->
                <div class="modal-header">
                    <h4 class="modal-title text-primary" id="addSeatTypeModalLabel">Add Seat Type</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <!-- This is the actual content (can put anything here) -->
                <div class="modal-body">
                    <div class="card input-card"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                        <div class="card-body input-card-body">
                            <label for="seatTypeNameInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                <small class="card-subtitle mb-2 text-secondary font-weight-normal">Name</small> <!-- The small element is where we actually write down what the input does  -->
                            </label>
                            <input id="seatTypeNameInput" name="seatTypeNameInput" class="form-control card-input" type="text" placeholder="e.g. Handicapped"> <!-- This is where the user actually inputs all their stuff  -->
                        </div>
                    </div>
                    <div class="card input-card mt-3">
                        <div class="card-body no-label-card-body">
                            <div id="blockSeatTypeCheckForm">
                                <div class="form-check form-check-inline ml-2">
                                    <input id="blockSeatTypeCheck" name="blockSeatTypeCheck"  class="form-check-input lg-check" type="checkbox" value="true">
                                    <label class="form-check-label px-3" for="blockSeatTypeCheck">
                                        Block helpers from reserving this seat type
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- This is the footer, where you usually put buttons and stuff -->
                <div class="modal-footer">
                    <button id="addSeatTypeButton" class="btn btn-primary btn-lg w-100" type="button">Confirm</button>
                </div>
            </div>
        </div>
    </div>
</body>

<script>
    const selectableLegendClasses = 'card-hover text-primary font-weight-medium py-2 px-1';

    let availableSeatCharacters = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","v","w","x","y","z"];
    let selectedSeatType; // This variable will contain the character of the seat type we've selected

    let venues = [];

    // Seat chart configuration
    let sc = {};

    sc.map;

    sc.seats = {
        'G': {
            category: 'General',
            blocked: false,
            classes : 'general',
            legendClasses: selectableLegendClasses,
        },
        'H': {
            category: 'Handicapped',
            blocked: false,
            classes : 'handicapped',
            legendClasses: selectableLegendClasses,
        }
    };

    sc.naming = {
        rows: ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','AA','BB','CC','DD','EE', 'FF','GG','HH','JJ','KK','LL','MM','NN','OO'],
        getLabel : function (character, row, column) {
            return row + ':' + column;
        },
        getId : function (character, row, column) {
            return row + ':' + column;
        }
    };

    sc.legend = {
        node : $('#legend'),
        items : []				
    };

    sc.click = function () {
        replaceMapSeat(sc.map, this, selectedSeatType, sc.seats[selectedSeatType]) 
    };

    $(document).ready(async function() {
        try {
            // Get all venues and populate select options with all venues
            venues = await getAllVenues();
            populateVenueSelect(venues);
            setVenueDetails(getVenueFromSelect());

            // Bind map
            bindMap(sc, '#seatMap');
            scaleContentWidth($('#tableWrapper'), $('#seatMap')); // This function is used to scale the entire seat chart to fit within the card's dimensions when the seat chart is first created

            for (const seatCharacter in sc.seats) {
                renderSeatChartLegendCardTemplate(seatCharacter, sc.seats[seatCharacter]).appendTo($("#legend"));
            }
        } catch (error) {
            handleError(error);
        }
    });

    $(window).on('resize', function() { // Upon resizing the browser window, the scaling function is called to make sure the seat chart fits within the new dimensions of the parent container
        scaleContentWidth($('#tableWrapper'), $('#seatMap'));
    });

    $('#venueSelectInput').on('change', function() {
        const orgHeight = $('#seatMap')[0].getBoundingClientRect().height; // Get the original height of the seat map before reloading to the new map

        setVenueDetails(getVenueFromSelect());
        reloadMap(sc, '#seatMap', '.seatCharts-legendCard:not(#addSeatTypeCard)');
        resizeParentHeight(orgHeight, $('#tableWrapper'), $('#seatMap')); // Resize parent's height in relation to the original height
        scaleContentWidth($('#tableWrapper'), $('#seatMap'));
    });

    $("#addSeatTypeButton").click(function () {
        const seatName = $("#seatTypeNameInput").val();
        const seatIsBlocked = $("#blockSeatTypeCheck").is(':checked');
        const seatCharacter = availableSeatCharacters[0];
        const descriptiveCategory = seatName + ((seatIsBlocked) ? " (Blocked)" : "");

        if (!seatName) {
            showDangerToast("Please enter a seat name!");
            return;
        }

        sc.seats[seatCharacter] = {
            category: seatName,
            descriptiveCategory: descriptiveCategory,
            blocked: seatIsBlocked,
            classes: seatCharacter,
            legendClasses: selectableLegendClasses
        };

        availableSeatCharacters.shift(); // Deletes the first element in available seat characters as it's already taken
        renderSeatChartLegendCardTemplate(seatCharacter, sc.seats[seatCharacter]).appendTo($("#legend")); // Passes in the seat's details and its characters to the render function and appends the result to the legend element
        
        $("#addSeatTypeModal").modal('hide'); // Hides the modal
        $("#seatTypeNameInput").val(''); // Reset input to default state
        $("#blockSeatTypeCheck").prop('checked', false);

        return;
    });

    $(document).on("click", ".seatCharts-legendCard:not(#addSeatTypeCard)", function() {
        const highlighted = toggleHighlight($(this), ".seatCharts-legendCard");
        
        if (highlighted) {
            selectedSeatType = $(this).attr("seat-character");
        } else {
            selectedSeatType = null;
        }
    });

    populateVenueSelect = (venues) => {
        if (venues.length < 1) {
            throwError('There are no venues available. Please try again later!');
        }
        
        for (i = 0; i < venues.length; i++) {
            $('#venueSelectInput').append($('<option>', {
                value: i,
                text: venues[i].name
            }));
        }

        $("#venueSelectInput").val($("#venueSelectInput option:first").val());
    };

    getVenueFromSelect = () => {
        const selectedVenueVal = $("#venueSelectInput").val();

        if (!selectedVenueVal) {
            throwError('The selected option is not valid. Please try again later!');
        }

        if (!$.isNumeric(selectedVenueVal)) {
            throwError('The selected option is not valid. Please try again later!');
        }

        return venues[selectedVenueVal.toNum()];
    }

    setVenueDetails = (venue) => {
        sc.map = JSON.parse(venue.seatMap);
    }
</script>

<%- include('../templates/footer')-%>