<!-- TODO: set seat status -->

<%- include('../templates/head')-%>

<body>
    <%- include('../templates/navbar')-%>
    <div class="container">
        <!-- Always enclose everything in a container  -->
        <main role="main" class="inner cover">
            <!-- Idk what this element does but every tutorial uses it so eh might as well use it  -->

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Static card section  -->
            <!-- Heading  -->
            <div class="row">
                <!-- BTW, rows are used to create responsive columns but I'm guessing yall already know that. But if you don't, better learn the bootstrap grid system cause we're gonna use it a lot.  -->
                <div class="col-sm-6">
                    <h2 id="nameHeading" class="section-heading text-primary"><%= event.name %></h2>
                    <h5 id="startDateTimeHeading"><%= moment(event.startDateTime).format('Do MMMM YYYY') %> â€¢ <%= moment(event.startDateTime).format('h:mm a') %></h5>
                </div>
                <!-- Select (combo box) Input Card  -->
                <div class="col-sm-6">
                    <div class="card input-card">
                        <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                        <div class="card-body input-card-body">
                            <label for="searchReservationInput" class="card-input-label">
                                <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                <small class="card-subtitle mb-2 text-secondary font-weight-normal">Search
                                    Reservation</small>
                                <!-- The small element is where we actually write down what the input does  -->
                            </label>
                            <input id="searchReservationInput" name="searchReservationInput" class="form-control card-input" type="text"
                                placeholder="E.g. 91864675 ">
                            <!-- This is where the user actually inputs all their stuff  -->
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Content  -->
            <h3 id="venueNameHeading"><%= event['Venue.name'] %></h3>
            <div class="row">
                <div class="col-sm-6">
                    <!-- Used for spacing between sections  -->
                    <div class="card input-card mt-3">
                        <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                        <div class="card-body input-card-body">
                            <label for="testSelectInput" class="card-input-label">
                                <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                <small class="card-subtitle mb-2 text-secondary font-weight-normal">Zoom</small>
                                <!-- The small element is where we actually write down what the input does  -->
                            </label>
                            <select id="zoomQuadrantSelect" class="form-control card-input" id="testSelectInput" name="testSelectInput" onChange="window.location.href=this.value">
                                <!-- This is where the user actually inputs all their stuff  -->
                                <option>Whole Venue</option>
                                <option>Top Left</option>
                                <option value="/helper/eventtopright">Top Right</option>
                                <option>Bottom Left</option>
                                <option>Bottom Right</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div id="seatChartCard" class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                <div class="card-body">
                    <div id="tableWrapper" class="seatCharts-wrapper"> <!-- Seat maps should be ensclosed in a seat chart wrapper -->
                        <div id="seatMap" class="seatCharts-container"> <!-- This is the element the seat chart is gonna latch itself onto -->
                            <div class="front-indicator">Front</div> <!-- The seat chart element should also contain the front indicator so the user knows the orientation of the map -->
                        </div>
                    </div>
                </div>
            </div>
            <div id="legend" class="seatCharts-legend row"></div>

            <form id="reserveSeatForm" action="/" method="post">
                <div class="mt-6"></div> <!-- Used for spacing between sections  -->
                <h3>Reservation</h3>
                <div class="row">
                    <!-- BTW, rows are used to create responsive columns but I'm guessing yall already know that. But if you don't, better learn the bootstrap grid system cause we're gonna use it a lot.  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3">
                            <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="reservationNameInput" class="card-input-label">
                                    <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Name</small>
                                    <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="reservationNameInput" name="reservationNameInput" class="form-control card-input" type="text"
                                    placeholder="e.g. Lam En Qing">
                                <!-- This is where the user actually inputs all their stuff  -->
                            </div>
                        </div>
                    </div>
                    <!-- Select (combo box) Input Card  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3">
                            <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="reservationPhoneNumberInput" class="card-input-label">
                                    <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Phone Number</small>
                                    <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="reservationPhoneNumberInput" name="reservationPhoneNumberInput" class="form-control card-input" type="text"
                                    placeholder="e.g. 95179116">
                                <!-- This is where the user actually inputs all their stuff  -->
                            </div>
                        </div>
                    </div>
                </div>
                <div class="mt-4"></div>
                <button id="reserveSeatButton" type="submit" class="btn btn-lg btn-primary responsive-float w-100">Reserve Seats</button>
            </form>

            <div class="mt-6"></div>
            <h3>Waiting List</h3>
            <div class="mt-4"></div> <!-- Used for spacing between section heading and content  -->
            <!-- Content  -->
            <div class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                <div class="card-body p-0">  <!-- We set the card's padding to 0 cause we want the table's edges to be flush with the table  -->
                    <!-- Table  -->
                    <div class="table-responsive">
                        <table class="table table-hover table-click table-lg"> 
                            <thead>
                                <tr>
                                    <th scope="col">Name</th>
                                    <th scope="col">Phone No.</th>
                                    <th scope="col">No. of additional guests</th>
                                    <th scope="col">Date</th>
                                    <th scope="col">Time</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td class="font-weight-medium">Lam En Qing</td>
                                    <td class="font-weight-medium"><a href="#">90616192</a></td>
                                    <td class="font-weight-medium">2</td>
                                    <td class="font-weight-medium">18th April 2021</td>
                                    <td class="font-weight-medium">9am</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="seatDetailsModal" tabindex="-1" role="dialog" aria-labelledby="seatDetailsModal" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <!-- This is where you enter the title of the modal -->
                        <!-- This is the actual content (can put anything here) -->
                        <div class="modal-body">
                            <div class="d-flex">
                                <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                                <div id="seatDetailsSeatCell" class="seatCharts-seat seatCharts-cell available" style="height: 50px; width: 50px;"></div>                           
                                <span id="seatDetailsId" class="align-self-center"></span>
                                <span id="seatDetailsDescription" class="align-self-center">Reserved for Adam</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
</body>

<script>
    const helperId = <%= user.id %>;
    const eventId = <%= event.id %>;

    const nameHeading = '#nameHeading';
    const startDateTimeHeading = '#startDateTimeHeading';
    const searchReservationInput = '#searchReservationInput';
    const venueNameHeading = '#venueNameHeading';
    const zoomQuadrantSelect = '#zoomQuadrantSelect';
    const venueSelectInput = '#venueSelectInput';
    const seatChartCard = '#seatChartCard';
    const tableWrapper = '#tableWrapper';
    const seatMap = '#seatMap';
    const legend = '#legend';
    const reserveSeatForm = '#reserveSeatForm';
    const reservationNameInput = '#reservationNameInput';
    const reservationPhoneNumberInput = '#reservationPhoneNumberInput';
    const reserveSeatButton = '#reserveSeatButton';
    const seatDetailsModal = '#seatDetailsModal';
    const seatDetailsSeatCell = '#seatDetailsSeatCell';
    const seatDetailsSeatId = '#seatDetailsId';
    const seatDetailsDescription = '#seatDetailsDescription';

    // Seat chart configuration
    let sc = {};

    sc.map = [],

    sc.seats = {};

    sc.naming = {
        rows: ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','AA','BB','CC','DD','EE', 'FF','GG','HH','JJ','KK','LL','MM','NN','OO'],
        getLabel: function (character, row, column) {
            return row + ':' + column;
        },
        getId: function (character, row, column) {
            return row + ':' + column;
        }
    };

    sc.legend = {
        node: $(legend),
        items: []					
    };

    sc.click = function () {
        // Temporary hack
        if (this.settings.data.blocked) {
            console.log(this)
            $(seatDetailsModal).modal();
            $(seatDetailsSeatCell).addClass(this.settings.data.classes);
            $(seatDetailsSeatId).text(this.settings.id);
            $(seatDetailsDescription).text(`Blocked for ${this.settings.data.category}`);
        } else {
            if (this.status() == 'available') {
                return 'selected';
            } else if (this.status() == 'selected') {
                return 'available';
            }
        }
    };

    // Rest of the functions
    $(document).ready(async function() {
        try {
            const eventDetails = await getEventDetailsForHelper(eventId, helperId);
            sc.map = eventDetails.event.seatMap;
            sc.seats = getSeatsObject(eventDetails.seatTypes);

            bindMap(sc, seatMap);
            scaleContentWidth(tableWrapper, seatMap);

            for (const seatCharacter in sc.seats) {
                renderSeatChartLegendCardTemplate(seatCharacter, sc.seats[seatCharacter]).appendTo($(legend));
            }
        } catch (error) {
            handleError(error);
        }
    });

    $(window).resize(function() { // Upon resizing the browser window, the scaling function is called to make sure the seat chart fits within the new dimensions of the parent container
        scaleContentWidth(tableWrapper, seatMap);
    });

    getSeatsObject = (seatTypeArray) => {
        let seats = {};

        for (i = 0; i < seatTypeArray.length; i++) {
            const seat = seatTypeArray[i];
            seats[seat.character] = {
                category: seat.name,
                blocked: seat.isBlocked,
                classes: seat.cssClasses,
            };
        }
        
        return seats;
    };
</script>

<!-- <script>
    $(document).ready(function () {
        // This whole part initialises the seat chart
        var sc = $('#seat-map').seatCharts({
            // This map is created from the seat characters defined in the seats section below
            // Also the underscores represent empty spaces
            // NOTE THAT the number columns must be same across all rows, otherwise the chart will break. Enter empty spaces (underscore) if you want to leave empty space
            map: [
                '________________________________________',
                '___GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG___',
                '__GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG__',
                '_GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG_',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGG______________GGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG',
                'HGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGH',
                'HGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGH',
                'HGGGGGGGGGGGG______________GGGGGGGGGGGGH',
                'HGGGGGGGGGGGG______________GGGGGGGGGGGGH',
                'HGGGGGGGGGGGG______________GGGGGGGGGGGGH',
                // '____GGGGGGGGGGG____',
                // '___GGGGGGGGGGGGG___',
                // '__GGGGGGGGGGGGGGG__',
                // '_GGGGGGGGGGGGGGGGG_',
                // 'GGGGGGGGGGGGGGGGGGG',
                // 'GGGGGGG______GGGGGG',
                // 'GGGGGGGGGGGGGGGGGGG',
            ],
            // This section just defines all the different seat types
            // Each seat type must contain a SINGLE character to identify it in places like the seat-chart above
            // They should also contain the css class of each class (contained under the seat type section of style.css) and a user-readable category
            // Each seat can also contain other data like price or whatever

            // FYI, seats also have statuses that we can define. So far we have five statuses: available, reserved (planner can edit), blocked (planner cannot edit), selected (currently selected seats), highlighted. We can add other statuses by adding its CSS classes to the seat statuses section of the style.css
            // We can't define each seats' status here, cause we have to wait till the seat charts fully initialised to do that
            seats: {
                // Uppercase seats represent fixed seat types that'll be applicable to every event
                'G': { // This is the seat character that we can use in the seat chart to identify the seat type
                    classes: 'general', // This is the CSS class associated with the seat type (contained under the seat type section of style.css)
                    category: 'General' // This is the user-readable category of the seat type
                },
                'H': {
                    classes: 'handicapped',
                    category: 'Handicapped'
                },
                // Lowercase seats represent will be used for custom seats created by the planner for each event
                'a': {
                    classes: 'a',
                    category: 'Award Winners (Blocked)'
                },
                'b': {
                    classes: 'b',
                    category: 'DIT DWM (Blocked)'
                },
                'c': {
                    classes: 'c',
                    category: 'DSF DWM (Blocked)'
                },
                'd': {
                    classes: 'd',
                    category: 'DCS DWM (Blocked)'
                },
                'e': {
                    classes: 'e',
                    category: 'DIT Graduates (Blocked)'
                },
                'f': {
                    classes: 'f',
                    category: 'DSF Graduates (Blocked)'
                },
                'g': {
                    classes: 'g',
                    category: 'DEI/DCS Graduates (Blocked)'
                },
                'h': {
                    classes: 'h',
                    category: 'Late Comers (Blocked)'
                },
                'i': {
                    classes: 'i',
                    category: 'Guests of AW (Blocked)'
                },
                'j': {
                    classes: 'j',
                    category: 'VIP (Blocked)'
                },
                'k': {
                    classes: 'k',
                    category: 'Industrial Guests (Blocked)'
                },
                'l': {
                    classes: 'l',
                    category: 'Previous Alumni (Blocked)'
                },
            },
            // This section just contains how we define our rows, columns, seat label, seat id, etc
            naming: {
                rows: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'BB', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'JJ', 'KK', 'LL', 'MM', 'NN'], // This array is used to define how we name our rows from top-to-bottom
                // columns: [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], // This array is used to define how we name our columns from left-to-right. Don't need to mess around with this for now.
                // These two functions below just define how we name our labels and ids respectively
                // So both just use the row:column format (eg: E:19)
                getLabel: function (character, row, column) {
                    return row + ':' + column;
                },
                getId: function (character, row, column) {
                    return row + ':' + column;
                },
            },
            // This section defines how we wanna present the legend of the seat chart
            legend: {
                node: $('#legend'), // This is the element the legend attaches itself to
                // These are the seat legends we wanna present to the user
                // Not every seat type and its different statuses has to be here, just the essential
                items: [
                    ['G', 'available', 'General'], // Each legend contains the character of the seat type we wanna present, the status of the seat type (so far we have five statuses: available, reserved (planner can edit), blocked (planner cannot edit), selected (currently selected seats), highlighted), and a user readable label
                    ['H', 'available', 'Handicapped'],
                    ['G', 'reserved', 'Reserved'],
                    ['G', 'blocked', 'Blocked'],
                    // [ 'a', 'available', 'Award Winners (Blocked)'],
                    // [ 'b', 'blocked', 'DIT DWM (Blocked)'],
                    // [ 'c', 'blocked', 'DSF DWM (Blocked)'],
                    // [ 'd', 'blocked', 'DCS DWM (Blocked)'],
                    // [ 'e', 'blocked', 'DIT Graduates (Blocked)'],
                    // [ 'f', 'blocked', 'DSF Graduates (Blocked)'],
                    // [ 'g', 'blocked', 'DEI/DCS Graduates (Blocked)'],
                    // [ 'h', 'blocked', 'Late Comers (Blocked)'],
                    // [ 'i', 'blocked', 'Guests of AW (Blocked)'],
                    // [ 'j', 'blocked', 'VIP (Blocked)'],
                    // [ 'k', 'blocked', 'Industrial Guests (Blocked)'],
                    // [ 'l', 'blocked', 'Previous Alumni (Blocked)'],
                ]
            },
            // This section defines what happens when the user clicks on a seat
            // We have to define what happens according to the clicked seat's status
            click: function () {
                if (this.status() == 'available') {
                    return 'selected';
                } else if (this.status() == 'selected') {
                    return 'available';
                } else if (this.status() == 'reserved') {
                    return 'reserved';
                } else {
                    return this.style();
                }
            }
        });

        // This is the part where we actually set the seat's status individually
        // Note that I'm using regex here to set the seat status on a larger scale but in the actual app, we probably have to do a for-loop on all the seats and set their status individually
        sc.find('available').status('blocked');
        sc.find(/^[E-J]:[0-9]+/).status('available');
        sc.find(/^[K-N]:[0-9]+/).status('reserved');
        sc.find(/^[K-N]:(1[4-9]|2[0-7])+/).status('blocked');
        sc.find(/^[T-V]:(1[4-9]|2[0-7])+/).status('reserved');
        sc.find(/^[W-Y]:(1[4-9]|[23][0-9]|40)+/).status('reserved');
        sc.find(/^[Z]:[0-9]+/).status('reserved');
        sc.find(/^AA:[0-9]+/).status('reserved');
        sc.find(/^BB:[0-9]+/).status('reserved');
        sc.find(/^CC:[0-9]+/).status('reserved');
        sc.find(/^DD:[0-9]+/).status('reserved');
        sc.get("DD:1").status('available');

        scaleContentWidth($('#table-wrapper'), $('#seat-map')); // This function is used to scale the entire seat chart to fit within the card's dimensions when the seat chart is first created
    });

    $(window).on('resize', function () { // Upon resizing the browser window, the scaling function is called to make sure the seat chart fits within the parent container
        scaleContentWidth($('#table-wrapper'), $('#seat-map'));
    });
</script> -->

<%- include('../templates/footer')-%>