<!-- TODO: Make sure the starting map isn't static, and is actually created from the input default values -->

<%- include('../templates/head')-%>
<body>
    <%- include('../templates/navbar')-%>
    <div class="container"> <!-- Always enclose everything in a container  -->
        <main role="main" class="inner cover"> <!-- Idk what this element does but every tutorial uses it so eh might as well use it  -->

            <div class="mt-6"></div> <!-- Used for spacing between sections  -->
            <!-- Venue details form section  -->
            <!-- Heading  -->
            <h2 class="section-heading">Venue Details</h2>
            <div class="mt-3"></div>

            <form id="createVenueForm" action="/api/create-venue" method="post">
                <div class="row"> <!-- BTW, rows are used to create responsive columns but I'm guessing yall already know that. But if you don't, better learn the bootstrap grid system cause we're gonna use it a lot.  -->
                    <!-- Venue Name Input Card  -->
                    <div class="col-sm-6">
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="nameInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Venue Name</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="nameInput" name="nameInput" class="form-control card-input" type="text" placeholder="e.g. Block A"> <!-- Note that the name attribute is required to get textbox values from the backend. It should have the same value as the id.  --> 
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-6"></div> <!-- Used for spacing between sections  -->
                <!-- Seat chart card section  -->
                <!-- Heading  -->
                <h2 class="section-heading">Seat Chart</h2>
                <div class="mt-3"></div> <!-- Used for spacing between section heading and content  -->
                <!-- Content  -->
                <div class="row">
                    <div class="col-sm-3">
                        <!-- Column Input Card  -->
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="columnInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Columns</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="columnInput" name="columnInput" class="form-control card-input" type="number" value="6" min="1" max="40" placeholder="e.g. 10">
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <!-- Row Input Card  -->
                        <div class="card input-card mt-3"> <!-- All form elements should be enclosed in cards so they look consistent with the rest of the ui  -->
                            <div class="card-body input-card-body">
                                <label for="rowInput" class="card-input-label"> <!-- Labels are used to indicate to the user what the input is/does. Also, the "for" attribute should contain the exact id of the input element  -->
                                    <small class="card-subtitle mb-2 text-secondary font-weight-normal">Rows</small> <!-- The small element is where we actually write down what the input does  -->
                                </label>
                                <input id="rowInput" name="rowInput" class="form-control card-input" type="number" value="4" min="1" max="40" placeholder="e.g. 7">
                            </div>
                        </div>
                    </div>
                </div>

                <div id="seatChartCard" class="card mt-3"> <!-- Put interactible elements in a card, enclosed with card-body  -->
                    <div class="card-body">
                        <div id="tableWrapper" class="seatCharts-wrapper"> <!-- Seat maps should be ensclosed in a seat chart wrapper -->
                            <div id="seatMap" class="seatCharts-container"> <!-- This is the element the seat chart is gonna latch itself onto -->
                                <div class="front-indicator">Front</div> <!-- The seat chart element should also contain the front indicator so the user knows the orientation of the map -->
                            </div>
                        </div>
                    </div>
                </div>
                <div id="legend" class="seatCharts-legend row"> <!-- This is the element that the legends are gonna attach themselves to -->
                </div>
                <div class="mt-6"></div> <!-- Used for spacing between sections  -->
                <button id="saveVenueTypeButton" class="btn btn-primary btn-lg w-100" type="submit">Create Venue</button>
            </form>
        </main>
    </div>
</body>

<script>
    // Declare all the ids of the various html elements we're gonna manipulate as variables so referencing them in js is easier
    const createVenueForm = '#createVenueForm';
    const nameInput = '#nameInput';
    const columnInput = '#columnInput';
    const rowInput = '#rowInput';
    const tableWrapper = '#tableWrapper';
    const seatMap = '#seatMap';
    const legend = '#legend';
    const saveVenueTypeButton = '#saveVenueTypeButton';

    // Declare the default seat type characters over here
    const defaultSeat = "G";
    const emptySpace = "_"; // The actual empty space character (_) creates a seat cell that cannot be interacted with
    const tempEmptySpace = "E"; // We have to use a temporary character (E) that can be interacted with to denote empty space while the user is editing the seat map
    // We will convert the temporary characters in the map to the actual empty space character when we're submitting the seat map

    const selectableLegendClasses = 'card-hover text-primary font-weight-medium py-2 px-4'; // These are the css class belonging to legends that can be clicked on by the user

    let selectedSeatType; // This variable will contain the character of the seat type the user's selected

    // Seat chart configuration
    let sc = {}; // The configuration attribures are stored in the sc object which will then be passed into the bind map function. Upon changing any of the configuration attributes like the map, pass the updated sc object into the reloadMap function

    sc.map = [ // The seat map that the configuration object is instantiated with. For the add venue page we just instantiate with a default map with 4 rows and 6 columns
        'GGGGGG',
        'GGGGGG',
        'GGGGGG',
        'GGGGGG',
    ];

    sc.seats = { // The seat types required for this map, with attributes that specify different properties of the seat. In the add venue page, we will only have two seat types at all times (available and empty), so we'll be instantiating the map those two seat types alone
        // Each seat type is a key-value pair, where the key is the seat character and the value is an object containing various details about the seat type 
        [defaultSeat]: {
            category: 'General', // Human readable name for the seat character
            blocked: false, // Whether it's a blocked seat type
            classes: 'general', // The css class of the seat
        },
        [tempEmptySpace]: {
            category: 'Empty Space',
            blocked: false,
            classes: 'temp-space',
        }
    };
    
    sc.naming = {
        rows: ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','AA','BB','CC','DD','EE','FF','GG','HH','JJ','KK','LL','MM','NN','OO'],
        getLabel: function (character, row, column) {
            return row + ':' + column;
        },
        getId: function (character, row, column) {
            return row + ':' + column;
        }
    };

    sc.legend = {
        node: $(legend),
        items: [
            [defaultSeat, 'seat-legend-icon add-seat-legend-icon', 'Add Seat', selectableLegendClasses],
            [tempEmptySpace, 'seat-legend-icon remove-seat-legend-icon', 'Remove Seat', selectableLegendClasses],
        ]					
    },

    sc.click = function () {
        if (sc.hasOwnProperty('map') && sc.hasOwnProperty('seats')) {
            replaceMapSeat(sc.map, this, selectedSeatType, sc.seats[selectedSeatType]) 
        }
    };

    // Rest of the functions
    $(document).ready(function() {
        bindMap(sc, seatMap);
        scaleContentWidth(tableWrapper, seatMap);
    });

    $(window).resize(function() { // Upon resizing the browser window, the scaling function is called to make sure the seat chart fits within the new dimensions of the parent container
        scaleContentWidth(tableWrapper, seatMap);
    });

    $(`${columnInput}, ${rowInput}`).change(function () {
        const columnVal = $(columnInput).val();
        const rowVal = $(rowInput).val();

        if (!$.isNumeric(columnVal) || !$.isNumeric(rowVal)) {
            return showDangerToast("Please enter a valid value!");
        }

        const columns = columnVal.toNum();
        const rows = rowVal.toNum();

        if (columns < 1 || rows < 1) {
            return showDangerToast("Please enter a larger value!");
        }

        if (columns > 40 || rows > 40) {
            return showDangerToast("Please enter a smaller value!");
        }

        if (this.id == "rowInput") {
            sc.map = resizeRows(columns, rows, sc.map); // Changes number of columns
        }

        if (this.id == "columnInput") {
            sc.map = resizeColumns(columns, rows, sc.map); // Changes number of rows
        }

        reloadMap(sc, tableWrapper, seatMap, legend); // Reloads the map with the updated map
    });

    $(document).on("click", ".seatCharts-legendCard", function() {
        const seatCharAttr = $(this).attr("seat-character");
        if (typeof seatCharAttr !== typeof undefined && seatCharAttr !== false) {
            const highlighted = toggleHighlight(this, ".seatCharts-legendCard");
            selectedSeatType = (highlighted) ? seatCharAttr : null;
        } else {
            $(this).removeClass("highlighted");
        }
    });

    $(createVenueForm).submit(async function (event) {
        event.preventDefault();
        $(saveVenueTypeButton).prop('disabled', true);

        const name = toTitleCase($(nameInput).val());
        const map = replaceMapSeatCharacters(sc.map, tempEmptySpace, emptySpace);
        
        try {
            await createVenue(name, map);
            
            $(window).unbind('beforeunload');
            
            window.location.replace("/admin/venues");
        } catch (error) {
            handleError(error);
        } finally {
            $(saveVenueTypeButton).prop('disabled', false);
        }
    });

    $(window).on('beforeunload', function() {
        return confirm();
    });
</script>

<%- include('../templates/footer')-%>